"use client";

import React, { useState } from 'react';
import { BarChart3, Calendar, ChevronLeft, ChevronRight, Dumbbell, Trophy, Rocket, Clock, LineChart, ArrowUp } from 'lucide-react';

// Mock data for workouts - in a real implementation, you would import this from a JSON file
// exported from Hevy or potentially fetch from their API if available
const workoutData = {
  recentWorkouts: [
    {
      id: 1,
      date: '2023-04-01',
      name: 'Push Day',
      duration: 68, // minutes
      exercises: [
        { name: 'Bench Press', sets: 4, weight: 185, reps: 8 },
        { name: 'Incline DB Press', sets: 3, weight: 70, reps: 10 },
        { name: 'Triceps Pushdown', sets: 3, weight: 65, reps: 12 },
        { name: 'Lateral Raises', sets: 4, weight: 20, reps: 15 },
      ],
      totalVolume: 11430,
    },
    {
      id: 2,
      date: '2023-03-30',
      name: 'Pull Day',
      duration: 72,
      exercises: [
        { name: 'Deadlift', sets: 4, weight: 275, reps: 5 },
        { name: 'Pull-ups', sets: 4, weight: 0, reps: 8 },
        { name: 'Barbell Row', sets: 3, weight: 155, reps: 8 },
        { name: 'Bicep Curls', sets: 3, weight: 35, reps: 12 },
      ],
      totalVolume: 9580,
    },
    {
      id: 3,
      date: '2023-03-28',
      name: 'Leg Day',
      duration: 65,
      exercises: [
        { name: 'Squat', sets: 4, weight: 225, reps: 8 },
        { name: 'Romanian Deadlift', sets: 3, weight: 185, reps: 10 },
        { name: 'Leg Press', sets: 3, weight: 360, reps: 12 },
        { name: 'Calf Raises', sets: 4, weight: 130, reps: 15 },
      ],
      totalVolume: 16820,
    },
  ],
  personalRecords: [
    { exercise: 'Bench Press', weight: 225, reps: 1, date: '2023-03-15' },
    { exercise: 'Squat', weight: 275, reps: 1, date: '2023-03-10' },
    { exercise: 'Deadlift', weight: 315, reps: 1, date: '2023-02-28' },
    { exercise: 'Overhead Press', weight: 145, reps: 1, date: '2023-03-22' },
    { exercise: 'Barbell Row', weight: 185, reps: 5, date: '2023-03-08' },
  ],
  volumeProgress: [
    { week: 'Week 1', volume: 30000 },
    { week: 'Week 2', volume: 32500 },
    { week: 'Week 3', volume: 31000 },
    { week: 'Week 4', volume: 34000 },
    { week: 'Week 5', volume: 36500 },
    { week: 'Week 6', volume: 38000 },
    { week: 'Week 7', volume: 39500 },
    { week: 'Week 8', volume: 41000 },
  ],
  // Calendar data with workout frequency
  calendar: {
    // Mock data for a month of workouts
    // 1 = light workout, 2 = medium, 3 = intense
    '2023-03-01': 2,
    '2023-03-03': 3,
    '2023-03-05': 1,
    '2023-03-07': 2,
    '2023-03-09': 3,
    '2023-03-12': 2,
    '2023-03-14': 3,
    '2023-03-16': 1,
    '2023-03-18': 2,
    '2023-03-20': 3,
    '2023-03-23': 2,
    '2023-03-25': 3,
    '2023-03-28': 3,
    '2023-03-30': 2,
    '2023-04-01': 3,
  } as Record<string, number>,
  stats: {
    totalWorkouts: 48,
    totalSets: 563,
    totalReps: 6824,
    totalVolume: 1240650, // in lbs
    averageWorkoutLength: 64, // minutes
    longestStreak: 14, // days
    currentStreak: 8, // days
  }
};

// Tab type
type WorkoutTab = 'overview' | 'recent' | 'records' | 'calendar';

const HevyPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<WorkoutTab>('overview');
  
  // Format date to more readable format
  const formatDate = (dateStr: string) => {
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  // Format volume with commas
  const formatNumber = (num: number) => {
    return new Intl.NumberFormat().format(num);
  };

  // Generate calendar grid for visualization
  const generateCalendar = () => {
    const now = new Date();
    const currentMonth = now.getMonth();
    const currentYear = now.getFullYear();
    
    // Get number of days in the current month
    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    
    // Get the start day of the week
    const firstDay = new Date(currentYear, currentMonth, 1).getDay();
    
    // Generate calendar grid
    const calendar = [];
    let day = 1;
    
    // Create weeks
    for (let i = 0; i < 6; i++) {
      // Break if we've gone past the last day of the month
      if (day > daysInMonth) break;
      
      const week = [];
      
      // Create days in a week
      for (let j = 0; j < 7; j++) {
        if ((i === 0 && j < firstDay) || day > daysInMonth) {
          // Empty cell before first day or after last day
          week.push(null);
        } else {
          // Format date string
          const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
          // Get workout intensity if this day had a workout
          const intensity = workoutData.calendar[dateStr] || 0;
          
          week.push({
            day,
            intensity,
            isToday: day === now.getDate() && now.getMonth() === currentMonth && now.getFullYear() === currentYear
          });
          
          day++;
        }
      }
      
      calendar.push(week);
    }
    
    return calendar;
  };
  
  // Tab navigation component
  const TabNavigation = () => (
    <div className="border-b border-zinc-200 dark:border-zinc-700 mb-6">
      <div className="flex space-x-6">
        <button
          onClick={() => setActiveTab('overview')}
          className={`py-3 px-1 relative ${activeTab === 'overview' ? 'text-black dark:text-white font-medium' : 'text-zinc-500 dark:text-zinc-400 hover:text-zinc-800 dark:hover:text-zinc-200'}`}
        >
          <div className="flex items-center gap-2">
            <BarChart3 className="w-4 h-4" />
            <span>Overview</span>
          </div>
          {activeTab === 'overview' && (
            <div className="absolute bottom-0 left-0 w-full h-0.5 bg-black dark:bg-white"></div>
          )}
        </button>
        
        <button
          onClick={() => setActiveTab('recent')}
          className={`py-3 px-1 relative ${activeTab === 'recent' ? 'text-black dark:text-white font-medium' : 'text-zinc-500 dark:text-zinc-400 hover:text-zinc-800 dark:hover:text-zinc-200'}`}
        >
          <div className="flex items-center gap-2">
            <Dumbbell className="w-4 h-4" />
            <span>Recent</span>
          </div>
          {activeTab === 'recent' && (
            <div className="absolute bottom-0 left-0 w-full h-0.5 bg-black dark:bg-white"></div>
          )}
        </button>
        
        <button
          onClick={() => setActiveTab('records')}
          className={`py-3 px-1 relative ${activeTab === 'records' ? 'text-black dark:text-white font-medium' : 'text-zinc-500 dark:text-zinc-400 hover:text-zinc-800 dark:hover:text-zinc-200'}`}
        >
          <div className="flex items-center gap-2">
            <Trophy className="w-4 h-4" />
            <span>PRs</span>
          </div>
          {activeTab === 'records' && (
            <div className="absolute bottom-0 left-0 w-full h-0.5 bg-black dark:bg-white"></div>
          )}
        </button>
        
        <button
          onClick={() => setActiveTab('calendar')}
          className={`py-3 px-1 relative ${activeTab === 'calendar' ? 'text-black dark:text-white font-medium' : 'text-zinc-500 dark:text-zinc-400 hover:text-zinc-800 dark:hover:text-zinc-200'}`}
        >
          <div className="flex items-center gap-2">
            <Calendar className="w-4 h-4" />
            <span>Calendar</span>
          </div>
          {activeTab === 'calendar' && (
            <div className="absolute bottom-0 left-0 w-full h-0.5 bg-black dark:bg-white"></div>
          )}
        </button>
      </div>
    </div>
  );

  // Overview tab content
  const OverviewTabContent = () => (
    <div>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <div className="bg-zinc-100 dark:bg-zinc-800 p-4 rounded-lg">
          <div className="flex items-center gap-2 mb-2">
            <Dumbbell className="w-4 h-4 text-zinc-500 dark:text-zinc-400" />
            <h3 className="text-sm font-medium text-zinc-700 dark:text-zinc-300">Total Workouts</h3>
          </div>
          <p className="text-2xl font-bold text-zinc-800 dark:text-white">{workoutData.stats.totalWorkouts}</p>
        </div>
        
        <div className="bg-zinc-100 dark:bg-zinc-800 p-4 rounded-lg">
          <div className="flex items-center gap-2 mb-2">
            <LineChart className="w-4 h-4 text-zinc-500 dark:text-zinc-400" />
            <h3 className="text-sm font-medium text-zinc-700 dark:text-zinc-300">Total Volume</h3>
          </div>
          <p className="text-2xl font-bold text-zinc-800 dark:text-white">{formatNumber(workoutData.stats.totalVolume)} lbs</p>
        </div>
        
        <div className="bg-zinc-100 dark:bg-zinc-800 p-4 rounded-lg">
          <div className="flex items-center gap-2 mb-2">
            <Rocket className="w-4 h-4 text-zinc-500 dark:text-zinc-400" />
            <h3 className="text-sm font-medium text-zinc-700 dark:text-zinc-300">Current Streak</h3>
          </div>
          <p className="text-2xl font-bold text-zinc-800 dark:text-white">{workoutData.stats.currentStreak} days</p>
        </div>
        
        <div className="bg-zinc-100 dark:bg-zinc-800 p-4 rounded-lg">
          <div className="flex items-center gap-2 mb-2">
            <Clock className="w-4 h-4 text-zinc-500 dark:text-zinc-400" />
            <h3 className="text-sm font-medium text-zinc-700 dark:text-zinc-300">Avg. Workout</h3>
          </div>
          <p className="text-2xl font-bold text-zinc-800 dark:text-white">{workoutData.stats.averageWorkoutLength} min</p>
        </div>
      </div>
      
      <div className="mb-8">
        <h3 className="text-base font-medium mb-4 dark:text-white">Volume Progress</h3>
        <div className="bg-zinc-100 dark:bg-zinc-800 p-4 rounded-lg h-60 flex items-end">
          {workoutData.volumeProgress.map((week, index) => (
            <div key={index} className="flex-1 flex flex-col items-center">
              <div 
                className="w-full max-w-[30px] bg-zinc-300 dark:bg-zinc-600 rounded-t"
                style={{ 
                  height: `${(week.volume / 45000) * 100}%`,
                  backgroundColor: index === workoutData.volumeProgress.length - 1 ? '#60a5fa' : '' 
                }}
              ></div>
              <p className="text-xs text-zinc-500 dark:text-zinc-400 mt-2 rotate-90 sm:rotate-0">{week.week}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  // Recent workouts tab content
  const RecentTabContent = () => (
    <div>
      <h3 className="text-base font-medium mb-4 dark:text-white">Recent Workouts</h3>
      
      <div className="space-y-4">
        {workoutData.recentWorkouts.map(workout => (
          <div key={workout.id} className="bg-zinc-100 dark:bg-zinc-800 p-4 rounded-lg">
            <div className="flex justify-between items-start mb-3">
              <div>
                <h4 className="font-medium text-zinc-800 dark:text-white">{workout.name}</h4>
                <p className="text-xs text-zinc-500 dark:text-zinc-400">{formatDate(workout.date)} • {workout.duration} min</p>
              </div>
              <span className="text-xs font-medium px-2 py-1 bg-zinc-200 dark:bg-zinc-700 rounded text-zinc-600 dark:text-zinc-300">
                {formatNumber(workout.totalVolume)} lbs
              </span>
            </div>
            
            <div className="space-y-2">
              {workout.exercises.map((exercise, i) => (
                <div key={i} className="flex justify-between text-sm">
                  <div className="text-zinc-700 dark:text-zinc-300">{exercise.name}</div>
                  <div className="text-zinc-500 dark:text-zinc-400">
                    {exercise.sets} × {exercise.reps} @ {exercise.weight} lbs
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  // Personal records tab content
  const RecordsTabContent = () => (
    <div>
      <h3 className="text-base font-medium mb-4 dark:text-white">Personal Records</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {workoutData.personalRecords.map((record, index) => (
          <div key={index} className="bg-zinc-100 dark:bg-zinc-800 p-4 rounded-lg">
            <div className="flex items-start justify-between">
              <div>
                <h4 className="font-medium text-zinc-800 dark:text-white flex items-center">
                  <Trophy className="w-4 h-4 mr-1 text-amber-500" />
                  {record.exercise}
                </h4>
                <p className="text-xs text-zinc-500 dark:text-zinc-400 mt-1">
                  {formatDate(record.date)}
                </p>
              </div>
              <div className="text-right">
                <div className="font-bold text-lg text-zinc-800 dark:text-white">
                  {record.weight} lbs
                </div>
                <div className="text-xs text-zinc-500 dark:text-zinc-400">
                  × {record.reps} {record.reps === 1 ? 'rep' : 'reps'}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  // Calendar tab content showing workout frequency
  const CalendarTabContent = () => {
    const calendar = generateCalendar();
    const monthNames = [
      'January', 'February', 'March', 'April', 'May', 'June', 
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    const now = new Date();
    const currentMonthName = monthNames[now.getMonth()];
    
    return (
      <div>
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-base font-medium dark:text-white">Workout Calendar</h3>
          <div className="flex items-center text-sm">
            <button className="p-1 text-zinc-500 dark:text-zinc-400 hover:text-zinc-800 dark:hover:text-white">
              <ChevronLeft className="w-4 h-4" />
            </button>
            <span className="px-2 text-zinc-700 dark:text-zinc-300">{currentMonthName} {now.getFullYear()}</span>
            <button className="p-1 text-zinc-500 dark:text-zinc-400 hover:text-zinc-800 dark:hover:text-white">
              <ChevronRight className="w-4 h-4" />
            </button>
          </div>
        </div>
        
        <div className="bg-zinc-100 dark:bg-zinc-800 rounded-lg p-4">
          <div className="grid grid-cols-7 gap-1 mb-2">
            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day, i) => (
              <div key={i} className="text-center text-xs font-medium text-zinc-500 dark:text-zinc-400">
                {day}
              </div>
            ))}
          </div>
          
          <div className="grid grid-cols-7 gap-1">
            {calendar.flatMap((week, i) => 
              week.map((day, j) => (
                <div 
                  key={`${i}-${j}`}
                  className={`aspect-square flex items-center justify-center rounded
                    ${day?.isToday ? 'border border-zinc-400 dark:border-zinc-500' : ''}
                    ${day ? (
                      day.intensity === 0 
                        ? 'bg-zinc-200 dark:bg-zinc-700 text-zinc-600 dark:text-zinc-400' 
                        : day.intensity === 1 
                          ? 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300' 
                          : day.intensity === 2 
                            ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300' 
                            : 'bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300'
                    ) : 'bg-transparent'}`}
                >
                  {day && (
                    <div className="text-xs">
                      {day.day}
                      {day.intensity > 0 && (
                        <div className="flex justify-center mt-1">
                          {Array(day.intensity).fill(0).map((_, i) => (
                            <div 
                              key={i} 
                              className="w-1 h-1 rounded-full bg-current mx-0.5"
                            ></div>
                          ))}
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ))
            )}
          </div>
          
          <div className="mt-4 flex justify-center gap-4 text-xs">
            <div className="flex items-center">
              <div className="w-3 h-3 rounded-full bg-green-100 dark:bg-green-900/30 mr-1"></div>
              <span className="text-zinc-600 dark:text-zinc-400">Light</span>
            </div>
            <div className="flex items-center">
              <div className="w-3 h-3 rounded-full bg-blue-100 dark:bg-blue-900/30 mr-1"></div>
              <span className="text-zinc-600 dark:text-zinc-400">Medium</span>
            </div>
            <div className="flex items-center">
              <div className="w-3 h-3 rounded-full bg-purple-100 dark:bg-purple-900/30 mr-1"></div>
              <span className="text-zinc-600 dark:text-zinc-400">Intense</span>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="max-w-7xl">
      <h2 className="text-lg font-medium mb-6 dark:text-white">
        Hevy Workouts
      </h2>
      
      <TabNavigation />
      
      {activeTab === 'overview' && <OverviewTabContent />}
      {activeTab === 'recent' && <RecentTabContent />}
      {activeTab === 'records' && <RecordsTabContent />}
      {activeTab === 'calendar' && <CalendarTabContent />}
      
      <div className="mt-8 flex items-center justify-center">
        <a 
          href="https://www.hevy.com/" 
          target="_blank" 
          rel="noreferrer" 
          className="inline-flex items-center gap-1 text-sm text-zinc-500 dark:text-zinc-400 hover:text-zinc-700 dark:hover:text-zinc-200"
        >
          Tracked with Hevy
          <ArrowUp className="w-3 h-3 -rotate-45" />
        </a>
      </div>
    </div>
  );
};

export default HevyPage; 